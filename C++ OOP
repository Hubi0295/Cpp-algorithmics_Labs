#include <iostream>
using namespace std;
class AbstractEmployee {
	virtual void AskForPromotion()=0;
};
class Employee:AbstractEmployee{
	private:
		string Company;
		int Age;
	protected:
		string Name;
	public:
		Employee(string name, string company, int age) {
			setName(name);
			setCompany(company);
			setAge(age);
		}

		void setName(string name) {
			Name = name;
		}
		string getName() {
			return Name;
		}

		void setCompany(string company) {
			Company = company;
		}
		string getCompany() {
			return Company;
		}

		void setAge(int age) {
			if (age < 18) {
				cout << "Wrong Input, age should be above 18" << endl;
				while (age < 18) {
					cout << "Input age again: " << endl;
					cin >> age;
				}
			}
			Age = age;
		}
		int getAge() {
			return Age;
		}

		void Show() {
			cout << "Name: " << Name << " Company: " << Company << " Age: " << Age << endl;
		}
		void AskForPromotion() {
			if (Age > 30) {
				cout << Name << " got promoted" << endl;
			}
			else{
				cout << Name << " Sorry, No promotion for you" << endl;
			}
		}
		virtual void Work() {
			cout << Name << " Checking mail, task backlog..." << endl;
		}
};
class Developer:public Employee {
	public:
		string FavProgrammingLanguage;
		Developer(string name, string company, int age, string favProgrammingLanguage)
			:Employee(name, company, age)
		{
			FavProgrammingLanguage = favProgrammingLanguage;
		}
		void FixBug(){
			cout << getName()<<"Repeat: "<<Name << " Fix it by " << FavProgrammingLanguage << endl;
		}
		void Work() {
			cout << Name << " is Writing Code in " << FavProgrammingLanguage<< endl;
		}
};
class Teacher : public Employee {
	public:
		string Subject;
		void PrepareLesson() {
			cout << Name << " is preparing" << Subject << " lesson" << endl;
		}
		Teacher(string name, string company, int age, string subject):Employee(name,company,age) 
		{
			Subject = subject;
		}
};
int main()
{
	Employee employee1 = Employee("Jim", "Apple", 19);
	Employee employee2 = Employee("John", "Amazon", 31);
	employee1.AskForPromotion();
	employee2.AskForPromotion();
	Developer developer1 = Developer("Hubert", "TTSW", 23, "Python");
	developer1.FixBug();
	developer1.AskForPromotion();
	cout << sizeof(developer1) << endl;
	Teacher teacher1 = Teacher("Jack", "School", 31, "History");
	teacher1.PrepareLesson();
	teacher1.AskForPromotion();
	
	Employee* e1=&developer1;
	Employee* e2 = &teacher1;
	e1->Work();
	e2->Work();
}
